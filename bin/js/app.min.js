
/* Check if variable is number */

(function() {
  var animateElement, calculateAspectRatio, calculateReducedRatio, changeIcon, changeView, empty, isInteger, isNumber, keyupEvent, resetValues, setAspectRatio;

  isNumber = function(obj) {
    return !isNaN(parseFloat(obj));
  };


  /* Check if a value is a positive number */

  isInteger = function(value) {
    return /^[0-9]+$/.test(value);
  };


  /* Check if variable is empty */

  empty = function(data) {
    var count, i;
    if (typeof data === 'number' || typeof data === 'boolean') {
      return false;
    }
    if (typeof data === 'undefined' || data === null) {
      return true;
    }
    if (typeof data.length !== 'undefined') {
      return data.length === 0;
    }
    count = 0;
    for (i in data) {
      if (data.hasOwnProperty(i)) {
        count++;
      }
    }
    return count === 0;
  };


  /* Animate element */

  animateElement = function(element) {
    $(element).addClass('animated pulse');
    return $(element).on('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', function() {
      return $(this).removeClass('animated pulse');
    });
  };


  /* Change views */

  changeView = function(button, oldView, newView) {
    var resetView;
    animateElement(button);
    resetView = $(button).attr('data-view');
    if (resetView) {
      return $(newView).fadeOut('200', function() {
        return $(resetView).fadeIn('200', function() {
          return $(button).attr('data-view', '');
        });
      });
    } else {
      return $(oldView).fadeOut('200', function() {
        return $(newView).fadeIn('200', function() {
          return $(button).attr('data-view', oldView);
        });
      });
    }
  };

  resetValues = function(button, inputs, ratio_suggestion) {
    $(button).addClass('fa-spin');
    $(inputs).val('');
    $(ratio_suggestion).text('');
    return setInterval((function() {
      $(button).removeClass('fa-spin');
    }), 1000);
  };


  /* Change button icon */

  changeIcon = function(element, removedClass, addedClass) {
    return $(element).removeClass(removedClass).addClass(addedClass);
  };


  /* Function to set the aspect ratio upon button press */

  setAspectRatio = function(getRatio) {
    var height, ratio, ratioArray, resolution, width;
    ratio = $(getRatio).text();
    width = height = 0;
    ratioArray = {
      '16 : 9': '1920,1080',
      '21 : 9': '2560,1080',
      '4 : 3': '1024,768',
      '2 : 1': '1024,512'
    };
    resolution = ratioArray[ratio].split(',');
    width = resolution[0];
    height = resolution[1];
    $('#w1').val(width);
    $('#h1').val(height);
    $('#w2').val('');
    $('#h2').val('');
    return $('#aspect-ratio-suggestion').text(ratio);
  };


  /* Function that calculates the aspect ratio */

  calculateAspectRatio = function(w2, h2, w1, h1) {
    var value;
    if ('undefined' !== typeof w2) {
      value = Math.round(w2 / (w1 / h1));
    } else if ('undefined' !== typeof h2) {
      value = Math.round(h2 * w1 / h1);
    }
    return value;
  };


  /* Function to reduce to smallest, integer ratio using Euclid's Algorithm */

  calculateReducedRatio = function(width, height) {
    var divisor, gcd, temp;
    gcd = function(a, b) {
      if (b === 0) {
        return a;
      }
      return gcd(b, a % b);
    };
    if (!isInteger(width) || !isInteger(height)) {
      return '';
    }
    if (width === height) {
      return '1 : 1';
    }
    if (+width < +height) {
      temp = width;
      width = height;
      height = temp;
    }
    divisor = gcd(+width, +height);
    if ('undefined' === typeof temp) {
      return width / divisor + ' : ' + height / divisor;
    } else {
      return height / divisor + ' : ' + width / divisor;
    }
  };


  /* Function for onkeyup action */

  keyupEvent = function(event) {
    var h1, h1v, h2, h2v, ratio, w1, w1v, w2, w2v;
    w1 = $('#w1');
    h1 = $('#h1');
    w2 = $('#w2');
    h2 = $('#h2');
    w1v = w1.val();
    h1v = h1.val();
    w2v = w2.val();
    h2v = h2.val();
    ratio = calculateReducedRatio(w1v, h1v);
    $('#aspect-ratio-suggestion').text(ratio);
    switch (event.target) {
      case w1[0]:
        if (!isInteger(w1v) || !isInteger(h1v) || !isInteger(h2v)) {
          return;
        }
        return w2.val(calculateAspectRatio(void 0, h2v, w1v, h1v));
      case h1[0]:
        if (!isInteger(h1v) || !isInteger(w1v) || !isInteger(w2v)) {
          return;
        }
        return h2.val(calculateAspectRatio(w2v, void 0, w1v, h1v));
      case w2[0]:
        if (!isInteger(w2v) || !isInteger(w1v) || !isInteger(h1v)) {
          return;
        }
        return h2.val(calculateAspectRatio(w2v, void 0, w1v, h1v));
      case h2[0]:
        if (!isInteger(h2v) || !isInteger(w1v) || !isInteger(h1v)) {
          return;
        }
        return w2.val(calculateAspectRatio(void 0, h2v, w1v, h1v));
    }
  };


  /* When the page finishes loading */

  $(function() {
    $('#info-button').on('click', function() {
      return changeView(this, '#calculator-wrapper', '#info-wrapper');
    });
    $('.aspect-ratio-button button').on('click', function() {
      return setAspectRatio(this);
    });
    $('#values-wrapper input').keyup(keyupEvent);
    return $('#reset-button span').on('click', function() {
      return resetValues(this, '#values-wrapper input', '#aspect-ratio-suggestion');
    });
  });

}).call(this);
